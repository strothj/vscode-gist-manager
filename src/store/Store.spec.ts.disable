import { IGithubTokenProvider, Store } from "./Store";

let mockGithubTokenProvider: IGithubTokenProvider;

beforeEach(() => {
  mockGithubTokenProvider = {
    getStoredAuthenticationToken: jest.fn(() => "token"),
  };
});

describe("authenticate", () => {
  it("throws exception when getToken is not provided", async () => {
    mockGithubTokenProvider = undefined as any;
    const store = createStore();

    await expect(store.authenticate()).rejects.toThrowErrorMatchingSnapshot();
  });

  it("sets status authenticating if a previous Github token exists", async () => {
    const store = createStore();
    const mockGetTokenWithToken = mockGithubTokenProvider.getStoredAuthenticationToken as jest.Mock<
      string
    >;

    const authenticatePromise = store.authenticate();

    expect(mockGetTokenWithToken.mock.calls.length).toBe(1);
    expect(store.status).toEqual("authenticating");

    await authenticatePromise;
  });

  it("sets status unauthenticated if no previous Github token exists", async () => {
    const store = createStore();
    const mockGetTokenWithNullToken = jest.fn(() => null);
    mockGithubTokenProvider.getStoredAuthenticationToken = mockGetTokenWithNullToken;

    await store.authenticate();

    expect(mockGetTokenWithNullToken.mock.calls.length).toBe(1);
    expect(store.status).toBe("unauthenticated");
  });
});

function createStore(initialStatus: string = "starting") {
  const store = Store.create(
    { status: initialStatus },
    {
      githubTokenProvider: mockGithubTokenProvider,
    },
  );

  return store;
}
